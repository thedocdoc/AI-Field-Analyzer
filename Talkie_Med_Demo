// Talkie library for Arduino - Raspberry Pi Pico version
// Based on original Talkie library by Peter Knight
// TMS5220 Based
// Medical Thermal Imaging Module for ATLAS
// Enhanced automatic demo with Fahrenheit conversion using real speech data

#include <Arduino.h>
#include <cstring>

// Pin configuration
#define SPEAKER_PIN 16
#define TEMP_SENSOR_PIN A0  // Placeholder for thermal sensor input

// Constants
#define CHIRP_SIZE 41
#define FS 8000  // Speech engine sample rate

// Medical temperature thresholds (in Celsius)
#define TEMP_NORMAL_LOW 36.0
#define TEMP_NORMAL_HIGH 37.5
#define TEMP_FEVER_LOW 37.6
#define TEMP_HIGH_FEVER 39.0
#define TEMP_CRITICAL 40.0

// Demo scenarios for automatic recording
enum DemoScenario {
  DEMO_NORMAL,
  DEMO_SLIGHT_FEVER,
  DEMO_HIGH_FEVER,
  DEMO_CRITICAL,
  DEMO_HYPOTHERMIA,
  DEMO_COUNT
};

// Core vocabulary - Numbers (real data)
static const uint8_t sp2_ZERO[] = {0x69,0xFB,0x59,0xDD,0x51,0xD5,0xD7,0xB5,0x6F,0x0A,0x78,0xC0,0x52,0x01,0x0F,0x50,0xAC,0xF6,0xA8,0x16,0x15,0xF2,0x7B,0xEA,0x19,0x47,0xD0,0x64,0xEB,0xAD,0x76,0xB5,0xEB,0xD1,0x96,0x24,0x6E,0x62,0x6D,0x5B,0x1F,0x0A,0xA7,0xB9,0xC5,0xAB,0xFD,0x1A,0x62,0xF0,0xF0,0xE2,0x6C,0x73,0x1C,0x73,0x52,0x1D,0x19,0x94,0x6F,0xCE,0x7D,0xED,0x6B,0xD9,0x82,0xDC,0x48,0xC7,0x2E,0x71,0x8B,0xBB,0xDF,0xFF,0x1F};
static const uint8_t sp2_ONE[] = {0x66,0x4E,0xA8,0x7A,0x8D,0xED,0xC4,0xB5,0xCD,0x89,0xD4,0xBC,0xA2,0xDB,0xD1,0x27,0xBE,0x33,0x4C,0xD9,0x4F,0x9B,0x4D,0x57,0x8A,0x76,0xBE,0xF5,0xA9,0xAA,0x2E,0x4F,0xD5,0xCD,0xB7,0xD9,0x43,0x5B,0x87,0x13,0x4C,0x0D,0xA7,0x75,0xAB,0x7B,0x3E,0xE3,0x19,0x6F,0x7F,0xA7,0xA7,0xF9,0xD0,0x30,0x5B,0x1D,0x9E,0x9A,0x34,0x44,0xBC,0xB6,0x7D,0xFE,0x1F};
static const uint8_t sp2_TWO[] = {0x06,0xB8,0x59,0x34,0x00,0x27,0xD6,0x38,0x60,0x58,0xD3,0x91,0x55,0x2D,0xAA,0x65,0x9D,0x4F,0xD1,0xB8,0x39,0x17,0x67,0xBF,0xC5,0xAE,0x5A,0x1D,0xB5,0x7A,0x06,0xF6,0xA9,0x7D,0x9D,0xD2,0x6C,0x55,0xA5,0x26,0x75,0xC9,0x9B,0xDF,0xFC,0x6E,0x0E,0x63,0x3A,0x34,0x70,0xAF,0x3E,0xFF,0x1F};
static const uint8_t sp2_THREE[] = {0x0C,0xE8,0x2E,0x94,0x01,0x4D,0xBA,0x4A,0x40,0x03,0x16,0x68,0x69,0x36,0x1C,0xE9,0xBA,0xB8,0xE5,0x39,0x70,0x72,0x84,0xDB,0x51,0xA4,0xA8,0x4E,0xA3,0xC9,0x77,0xB1,0xCA,0xD6,0x52,0xA8,0x71,0xED,0x2A,0x7B,0x4B,0xA6,0xE0,0x37,0xB7,0x5A,0xDD,0x48,0x8E,0x94,0xF1,0x64,0xCE,0x6D,0x19,0x55,0x91,0xBC,0x6E,0xD7,0xAD,0x1E,0xF5,0xAA,0x77,0x7A,0xC6,0x70,0x22,0xCD,0xC7,0xF9,0x89,0xCF,0xFF,0x03};
static const uint8_t sp2_FOUR[] = {0x08,0x68,0x21,0x0D,0x03,0x04,0x28,0xCE,0x92,0x03,0x23,0x4A,0xCA,0xA6,0x1C,0xDA,0xAD,0xB4,0x70,0xED,0x19,0x64,0xB7,0xD3,0x91,0x45,0x51,0x35,0x89,0xEA,0x66,0xDE,0xEA,0xE0,0xAB,0xD3,0x29,0x4F,0x1F,0xFA,0x52,0xF6,0x90,0x52,0x3B,0x25,0x7F,0xDD,0xCB,0x9D,0x72,0x72,0x8C,0x79,0xCB,0x6F,0xFA,0xD2,0x10,0x9E,0xB4,0x2C,0xE1,0x4F,0x25,0x70,0x3A,0xDC,0xBA,0x2F,0x6F,0xC1,0x75,0xCB,0xF2,0xFF};
static const uint8_t sp2_FIVE[] = {0x08,0x68,0x4E,0x9D,0x02,0x1C,0x60,0xC0,0x8C,0x69,0x12,0xB0,0xC0,0x28,0xAB,0x8C,0x9C,0xC0,0x2D,0xBB,0x38,0x79,0x31,0x15,0xA3,0xB6,0xE4,0x16,0xB7,0xDC,0xF5,0x6E,0x57,0xDF,0x54,0x5B,0x85,0xBE,0xD9,0xE3,0x5C,0xC6,0xD6,0x6D,0xB1,0xA5,0xBF,0x99,0x5B,0x3B,0x5A,0x30,0x09,0xAF,0x2F,0xED,0xEC,0x31,0xC4,0x5C,0xBE,0xD6,0x33,0xDD,0xAD,0x88,0x87,0xE2,0xD2,0xF2,0xF4,0xE0,0x16,0x2A,0xB2,0xE3,0x63,0x1F,0xF9,0xF0,0xE7,0xFF,0x01};
static const uint8_t sp2_SIX[] = {0x04,0xF8,0xAD,0x4C,0x02,0x16,0xB0,0x80,0x06,0x56,0x35,0x5D,0xA8,0x2A,0x6D,0xB9,0xCD,0x69,0xBB,0x2B,0x55,0xB5,0x2D,0xB7,0xDB,0xFD,0x9C,0x0D,0xD8,0x32,0x8A,0x7B,0xBC,0x02,0x00,0x03,0x0C,0xB1,0x2E,0x80,0xDF,0xD2,0x35,0x20,0x01,0x0E,0x60,0xE0,0xFF,0x01};
static const uint8_t sp2_SEVEN[] = {0x0C,0xF8,0x5E,0x4C,0x01,0xBF,0x95,0x7B,0xC0,0x02,0x16,0xB0,0xC0,0xC8,0xBA,0x36,0x4D,0xB7,0x27,0x37,0xBB,0xC5,0x29,0xBA,0x71,0x6D,0xB7,0xB5,0xAB,0xA8,0xCE,0xBD,0xD4,0xDE,0xA6,0xB2,0x5A,0xB1,0x34,0x6A,0x1D,0xA7,0x35,0x37,0xE5,0x5A,0xAE,0x6B,0xEE,0xD2,0xB6,0x26,0x4C,0x37,0xF5,0x4D,0xB9,0x9A,0x34,0x39,0xB7,0xC6,0xE1,0x1E,0x81,0xD8,0xA2,0xEC,0xE6,0xC7,0x7F,0xFE,0xFB,0x7F};
static const uint8_t sp2_EIGHT[] = {0x65,0x69,0x89,0xC5,0x73,0x66,0xDF,0xE9,0x8C,0x33,0x0E,0x41,0xC6,0xEA,0x5B,0xEF,0x7A,0xF5,0x33,0x25,0x50,0xE5,0xEA,0x39,0xD7,0xC5,0x6E,0x08,0x14,0xC1,0xDD,0x45,0x64,0x03,0x00,0x80,0x00,0xAE,0x70,0x33,0xC0,0x73,0x33,0x1A,0x10,0x40,0x8F,0x2B,0x14,0xF8,0x7F};
static  const uint8_t sp3_NINE[] = {0x62,0x75,0xDC,0x33,0xB5,0x62,0xB9,0x25,0x0B,0x8E,0x34,0x8F,0xD3,0xA6,0xAE,0x59,0xD2,0x34,0xE9,0x18,0x87,0x27,0xC9,0xD0,0x78,0xAB,0x6F,0xCE,0xC2,0x45,0x1B,0xAF,0xB6,0xF8,0x51,0x73,0x9D,0xB3,0x9A,0x12,0xC7,0x2C,0x6D,0xC9,0xAA,0x73,0x4B,0xF3,0x88,0x26,0xAB,0xCE,0x2D,0xCC,0x23,0xEA,0xAC,0x26,0xB7,0xD0,0x88,0x98,0xB3,0xBA,0x5C,0x43,0x32,0x7D,0xCE,0x1A,0x4A,0x0A,0xCD,0xF4,0x39,0x6B,0xAA,0x3E,0x24,0xCB,0x67,0xAF,0xB5,0xD9,0xE4,0x18,0x5F,0xB4,0xF6,0x6E,0x92,0x62,0x7D,0xD1,0x38,0xBA,0x09,0xF2,0x8D,0x59,0xED,0xE8,0x3A,0xD8,0x27,0x16,0xA6,0xBB,0x7B,0xF2,0x74,0x4F,0x92,0x9E,0x1E,0xC8,0x4A,0xC3,0x49,0x7A,0x9A,0x25,0x2B,0xF5,0x24,0xE9,0xEE,0xD1,0x24,0x25,0x27,0xBA,0xBB,0x25,0x51,0xD3,0xAA,0x24,0xAE,0x5E,0x54,0x55,0x3A,0xD4,0xFF,0x03};
static const uint8_t sp2_TEN[] = {0x0E,0x38,0x3C,0x2D,0x00,0x5F,0xB6,0x19,0x60,0xA8,0x90,0x93,0x36,0x2B,0xE2,0x99,0xB3,0x4E,0xD9,0x7D,0x89,0x85,0x2F,0xBE,0xD5,0xAD,0x4F,0x3F,0x64,0xAB,0xA4,0x3E,0xBA,0xD3,0x59,0x9A,0x2E,0x75,0xD5,0x39,0x6D,0x6B,0x0A,0x2D,0x3C,0xEC,0xE5,0xDD,0x1F,0xFE,0xB0,0xE7,0xFF,0x03};
static const uint8_t sp2_TWENTY[] = {0x0A,0xE8,0x4A,0xCD,0x01,0xDB,0xB9,0x33,0xC0,0xA6,0x54,0x0C,0xA4,0x34,0xD9,0xF2,0x0A,0x6C,0xBB,0xB3,0x53,0x0E,0x5D,0xA6,0x25,0x9B,0x6F,0x75,0xCA,0x61,0x52,0xDC,0x74,0x49,0xA9,0x8A,0xC4,0x76,0x4D,0xD7,0xB1,0x76,0xC0,0x55,0xA6,0x65,0xD8,0x26,0x99,0x5C,0x56,0xAD,0xB9,0x25,0x23,0xD5,0x7C,0x32,0x96,0xE9,0x9B,0x20,0x7D,0xCB,0x3C,0xFA,0x55,0xAE,0x99,0x1A,0x30,0xFC,0x4B,0x3C,0xFF,0x1F};
static const uint8_t sp2_HUNDRED[] = {0x04,0xC8,0x7E,0x5C,0x02,0x0A,0xA8,0x62,0x43,0x03,0xA7,0xA8,0x62,0x43,0x4B,0x97,0xDC,0xF2,0x14,0xC5,0xA7,0x9B,0x7A,0xD3,0x95,0x37,0xC3,0x1E,0x16,0x4A,0x66,0x36,0xF3,0x5A,0x89,0x6E,0xD4,0x30,0x55,0xB5,0x32,0xB7,0x31,0xB5,0xC1,0x69,0x2C,0xE9,0xF7,0xBC,0x96,0x12,0x39,0xD4,0xB5,0xFD,0xDA,0x9B,0x0F,0xD1,0x90,0xEE,0xF5,0xE4,0x17,0x02,0x45,0x28,0x77,0x11,0xD9,0x40,0x9E,0x45,0xDD,0x2B,0x33,0x71,0x7A,0xBA,0x0B,0x13,0x95,0x2D,0xF9,0xF9,0x7F};

// Core medical vocabulary (real data)
static const uint8_t sp2_DEGREES[] = {0x65,0x9F,0x5A,0x48,0x42,0x1D,0x8F,0x61,0xB8,0x62,0x56,0xFE,0xB2,0xFA,0x51,0x9C,0x85,0xED,0xCD,0xEA,0x47,0x4B,0x64,0xD5,0x35,0x69,0xE8,0xC7,0x41,0xD4,0x5E,0x8B,0x25,0x6B,0xB4,0x75,0xB7,0x84,0x40,0x11,0xCA,0x5D,0x44,0x36,0x98,0xAD,0xA9,0xAB,0x28,0x8D,0x1B,0xFA,0xE2,0x26,0xC9,0x44,0x69,0x6A,0xA3,0x13,0x8F,0x70,0xAD,0xA5,0xC9,0x99,0x42,0xDC,0x9C,0x8D,0xA6,0x36,0x4E,0x72,0xB3,0xBF,0xEA,0xD6,0x54,0xD9,0x25,0xFD,0xAA,0x46,0x19,0x86,0x90,0xAF,0xB3,0xEE,0x4D,0x19,0x47,0x12,0x90,0xCE,0x5B,0x75,0xC9,0x5B,0xDA,0x47,0x31,0x14,0xF3,0xD7,0xF9,0xCC,0x77,0xFC,0xFC,0xEF,0xFE,0xE6,0x99,0xC2,0x7C,0x93,0xFE,0xC5,0xDF,0x44,0x08,0x5B,0x75,0x36,0xFF,0xD2,0xC6,0xE2,0x91,0xCE,0xFD,0xDF,0x89,0x9A,0x68,0x3A,0x01,0x4C,0x48,0x2A,0x80,0x5F,0x33,0x34,0x40,0x81,0xFF,0x07};
static const uint8_t sp2_TEMPERATURE[] = {0x0E,0xF8,0x2E,0x2C,0x00,0xCB,0x8F,0x8F,0xA8,0x59,0x15,0xF7,0x58,0x79,0xD2,0x9A,0x5D,0x22,0xB5,0xF5,0x4D,0x47,0x96,0xAB,0x5A,0x87,0x69,0x0E,0x85,0xF7,0x46,0x1D,0xA1,0x0C,0x10,0xE0,0x32,0xBB,0x04,0x56,0x5E,0x62,0x91,0xA6,0x79,0xEF,0x7D,0xEC,0xC1,0x00,0x63,0x6C,0x46,0xC0,0x03,0x16,0x18,0x7D,0x8F,0x29,0x68,0x96,0xB5,0x4D,0x25,0x27,0x71,0x85,0xF7,0xBE,0xF6,0xBD,0x9F,0xF5,0x09,0x77,0x59,0xC2,0xDE,0x9A,0x27,0xBE,0xFE,0xFD,0x7F};
static const uint8_t sp2_POINT[] = {0x06,0xA8,0xCC,0x4B,0x03,0x2D,0xF3,0x69,0x2B,0x8C,0x1A,0xAF,0x2C,0x98,0xE9,0x28,0x4A,0xB3,0xF3,0x53,0xC6,0x90,0x9E,0xC1,0x6D,0x76,0x77,0xE6,0x9C,0x5D,0xD3,0x75,0xF1,0x58,0x5B,0x75,0x76,0xB7,0x4F,0xE3,0xE8,0xCE,0x31,0x3A,0x17,0xB6,0xB3,0x45,0x96,0xF4,0xAA,0x6D,0x4F,0x75,0x76,0xA3,0x94,0x66,0x6E,0x10,0x28,0x42,0xB9,0x8B,0xC8,0x06,0x50,0xC0,0x32,0x11,0x0A,0x58,0x76,0x87,0x01,0x3D,0xB5,0xFE,0x3F};
static const uint8_t sp2_HIGH[] = {0x04,0xC8,0x7E,0x9C,0x02,0x12,0xD0,0x80,0x06,0x56,0x96,0x7D,0x67,0x4B,0x2C,0xB9,0xC5,0x6D,0x6E,0x7D,0xEB,0xDB,0xDC,0xEE,0x8C,0x4D,0x8F,0x65,0xF1,0xE6,0xBD,0xEE,0x6D,0xEC,0xCD,0x97,0x74,0xE8,0xEA,0x79,0xCE,0xAB,0x5C,0x23,0x06,0x69,0xC4,0xA3,0x7C,0xC7,0xC7,0xBF,0xFF,0x0F};
static const uint8_t sp2_LOW[] = {0x65,0xDF,0x98,0xA3,0x4A,0xB4,0xE5,0x65,0x4E,0xAB,0x9F,0xD4,0xA2,0x92,0xBC,0x9E,0xB6,0xF2,0xC8,0x71,0xEA,0x7B,0x9B,0xD5,0x24,0x5E,0x3D,0xCC,0x79,0x77,0x3B,0xFB,0xB9,0xF4,0xBD,0xEE,0xF5,0x0C,0x97,0x37,0x5D,0x0B,0x92,0xC7,0xDF,0xFE,0xFD,0x7F};
static const uint8_t sp2_READY[] = {0x6A,0xB4,0xD9,0x25,0x4A,0xE5,0xDB,0xD9,0x8D,0xB1,0xB2,0x45,0x9A,0xF6,0xD8,0x9F,0xAE,0x26,0xD7,0x30,0xED,0x72,0xDA,0x9E,0xCD,0x9C,0x6D,0xC9,0x6D,0x76,0xED,0xFA,0xE1,0x93,0x8D,0xAD,0x51,0x1F,0xC7,0xD8,0x13,0x8B,0x5A,0x3F,0x99,0x4B,0x39,0x7A,0x13,0xE2,0xE8,0x3B,0xF5,0xCA,0x77,0x7E,0xC2,0xDB,0x2B,0x8A,0xC7,0xD6,0xFA,0x7F};
static const uint8_t sp2_DANGER[] = {0x2D,0xBF,0x21,0x92,0x59,0xB4,0x9F,0xA2,0x87,0x10,0x8E,0xDC,0x72,0xAB,0x5B,0x9D,0x62,0xA6,0x42,0x9E,0x9C,0xB8,0xB3,0x95,0x0D,0xAF,0x14,0x15,0xA5,0x47,0xDE,0x1D,0x7A,0x78,0x3A,0x49,0x65,0x55,0xD0,0x5E,0xAE,0x3A,0xB5,0x53,0x93,0x88,0x65,0xE2,0x00,0xEC,0x9A,0xEA,0x80,0x65,0x82,0xC7,0xD8,0x63,0x0A,0x9A,0x65,0x5D,0x53,0xC9,0x49,0x5C,0xE1,0x7D,0x2F,0x73,0x2F,0x47,0x59,0xC2,0xDE,0x9A,0x27,0x5F,0xF1,0x8B,0xDF,0xFF,0x03};
static const uint8_t sp4_WARNING[] = {0x6A,0x15,0x71,0x5C,0xDC,0x23,0x89,0x8D,0xD5,0x36,0xB5,0x8C,0x2D,0x36,0xDA,0xC6,0xCC,0xDD,0x91,0x5A,0xB9,0xBF,0x51,0xC7,0xCC,0x69,0x76,0x6A,0xA6,0x12,0xD2,0xB6,0xCE,0xDB,0x6B,0x0F,0xCC,0xBA,0xAA,0x10,0x2E,0xBC,0x29,0xED,0x2A,0xA2,0x5B,0xF3,0xA5,0x2C,0x2B,0x4F,0xA9,0x25,0x9A,0xBC,0xAE,0xBC,0x74,0xD3,0xF0,0x70,0xD6,0x8A,0xE4,0xC4,0x8A,0x3D,0xEE,0x6A,0x9B,0x57,0x35,0x8F,0xD4,0x6B,0xE8,0x3E,0xD8,0x22,0x16,0xAE,0x71,0xF8,0x20,0x4D,0x5F,0xB4,0xE6,0xE1,0x83,0xB4,0x7C,0xD6,0x58,0x46,0x0A,0x94,0xF1,0x99,0x73,0x09,0x47,0xAF,0x28,0x9D,0x16,0x34,0x1C,0xD5,0x61,0xA5,0xAA,0x13,0x73,0x65,0x43,0x15,0xE2,0x71,0xD2,0x95,0x0D,0x67,0x72,0xD8,0x4E,0x77,0xB1,0x5C,0xCE,0xEE,0xA4,0x3C,0x2D,0xBA,0xA4,0x5A,0xE5,0xF2,0x74,0x57,0x6C,0xA9,0xAB,0xFE,0x1F};
static const uint8_t sp2_ALERT[] = {0xA5,0xCF,0xC6,0xAB,0x55,0x5B,0xAF,0x39,0xDA,0xC9,0x54,0xDD,0xBC,0xC6,0xC2,0x3C,0x27,0x20,0xCF,0x1C,0xD7,0x30,0xB0,0x45,0x16,0x69,0x1D,0xC3,0x11,0xE4,0x59,0x8A,0x7C,0xB5,0x9B,0x8B,0xD9,0x30,0xB7,0xD3,0x76,0x19,0x9A,0x25,0x59,0x57,0x59,0xEC,0x11,0xAF,0xE8,0xD9,0xF9,0x2A,0x8A,0x1D,0xF0,0x75,0x3F,0x73,0xAC,0x87,0x3B,0xA2,0x0B,0xAA,0x2B,0xCF,0xE4,0x10,0xA1,0xDC,0x45,0x64,0x03,0x00,0x80,0x01,0x66,0x36,0x33,0xC0,0xAB,0xD5,0x0A,0x68,0x25,0x85,0x02,0xFF,0x0F};
static const uint8_t sp3_FARENHEIT[] = {0x04,0xE8,0xDE,0x1D,0x01,0x4B,0xBB,0x12,0x60,0x7A,0x77,0x01,0x0C,0xED,0x36,0x8A,0xEA,0xDD,0xDC,0x64,0xCD,0x2A,0x6A,0x34,0x4F,0xAD,0x25,0xBB,0x5C,0x55,0xCB,0xE6,0x29,0xBD,0x64,0xD7,0xAB,0xA9,0xC5,0x3C,0xA4,0xEB,0x88,0x56,0x35,0xB6,0x74,0x57,0x97,0xBA,0xD8,0xD8,0xDC,0xDD,0x59,0xE9,0x73,0xE3,0x94,0x30,0x6F,0x6B,0x2C,0xC1,0x42,0xC3,0xBA,0xAE,0xBA,0x85,0x14,0xB7,0x9C,0x5D,0xCE,0x6E,0x49,0x53,0x3D,0x6E,0x3A,0x9B,0x46,0x29,0xF3,0x78,0x0C,0x28,0xAE,0x53,0x03,0x1A,0x58,0x5D,0xD5,0x93,0x19,0xB2,0x66,0xF5,0xC5,0x4C,0x64,0xC8,0x9A,0xB1,0xB6,0x58,0x96,0x66,0x4F,0xC6,0xD5,0x5C,0x8B,0xA7,0xBE,0x2E,0x57,0xB3,0xC9,0x59,0xF1,0x66,0xDC,0x3D,0xB7,0xB8,0xD9,0x9A,0x72,0xB7,0x22,0xA6,0xDE,0xB5,0xD3,0xD7,0x1A,0xB9,0xF4,0xCE,0x46,0xE0,0x14,0xA5,0x2A,0x54,0x03,0x00,0x14,0x30,0x85,0xBA,0x00,0x9E,0xAF,0xF8,0x7F};
static const uint8_t sp3_ICE[] = {0xA9,0x89,0xE1,0x3C,0x3C,0x66,0x8F,0x31,0xEB,0x0B,0x2B,0x5F,0xBD,0xA6,0x62,0xC6,0xA2,0xEC,0xF1,0x6A,0xAB,0x6B,0xAE,0xF6,0x47,0xAB,0x6A,0x31,0xB0,0x3C,0x17,0x8F,0xAE,0x67,0x43,0x8B,0x5A,0x5C,0xC6,0x9E,0x18,0x2D,0x6B,0x76,0x58,0x5A,0x40,0xF1,0x98,0xC6,0x6A,0x6F,0xD2,0x20,0xBD,0x1B,0x1B,0xE0,0x49,0x13,0x03,0x7C,0x13,0x66,0x80,0x1F,0x3D,0x0C,0xF0,0x53,0x84,0x02,0x7E,0x77,0x57,0xC0,0x0F,0x66,0x0A,0xF8,0x29,0x44,0x01,0xBF,0x16,0x0B,0xE0,0x8F,0x34,0x01,0x7C,0x6B,0xF9,0xFF};
static const uint8_t sp4_PLEASE[] = {0x02,0x28,0x92,0xAD,0x95,0x45,0x6A,0xBB,0xA8,0xDB,0x51,0x15,0x16,0x5D,0x4C,0x6B,0x56,0xB5,0x84,0xB4,0x39,0x75,0x5D,0x45,0xD7,0x61,0xEC,0xBC,0x66,0x65,0xD3,0x85,0x60,0xE8,0x9A,0x95,0x2E,0xEB,0x0C,0x1D,0x4B,0x46,0x36,0x8C,0x22,0x77,0xBE,0x19,0x59,0x57,0x4A,0x1A,0xFE,0x66,0xE4,0x5D,0xA9,0xA8,0xE9,0xE6,0x51,0xFE,0x10,0x22,0x2C,0x4E,0x0D,0xF0,0x8C,0xAB,0x02,0x7E,0x4A,0xF9,0x7F};
static const uint8_t sp4_EMERGENCY[] = {0xA3,0x5B,0xCE,0x18,0x23,0x9F,0xAC,0x76,0x79,0x13,0x88,0x7C,0xB2,0xAA,0x19,0x8C,0x21,0x72,0xF5,0xAA,0x5A,0x50,0xD2,0xB0,0xD5,0xA9,0x76,0x52,0xB2,0x53,0xAD,0x95,0x26,0x72,0xD5,0x1A,0x8D,0xD6,0xDA,0x24,0xC5,0x22,0xC2,0x5E,0xAB,0x93,0xD6,0xB0,0x54,0xA5,0xAB,0x88,0x31,0xCD,0x93,0x92,0xAD,0x3C,0xDB,0x56,0x59,0xF6,0xB6,0x92,0x5C,0x83,0x6C,0x30,0xEB,0x0A,0x4A,0x5D,0xC6,0x45,0xAF,0x23,0xA8,0x53,0xC8,0xC2,0xF2,0xAA,0x24,0x3B,0x12,0xD3,0x6E,0xED,0xF2,0xB3,0x0C,0x99,0xDD,0x4B,0x00,0xB6,0x13,0x3A,0xE5,0xD4,0xA6,0xAC,0x91,0xE7,0x54,0xC3,0xA4,0xA1,0xE9,0xB6,0xD3,0x4E,0x19,0x46,0xA1,0xFD,0x46,0x3B,0xB9,0x8A,0x8E,0xB4,0x29,0x43,0x15,0xC2,0x93,0x1C,0xBD,0x8C,0x45,0xB0,0x8D,0x71,0xBD,0x36,0x6D,0xA6,0xA6,0xA2,0x69,0x0D,0xF0,0x8C,0xAB,0x02,0x7E,0x4A,0x31,0xC0,0x6F,0xA5,0x16,0x18,0x55,0x37,0x2E,0xEA,0xFE,0x65,0x0C,0x43,0xBB,0x50,0xFA,0x96,0x36,0x4E,0x93,0x82,0xE5,0x7B,0xDB,0x32,0x94,0x33,0x6E,0xFC,0x19,0xDB,0x74,0xC1,0x58,0xB1,0xA6,0xEC,0xCB,0x17,0x43,0xFA,0x9A,0x70,0x0C,0x6F,0x60,0x55,0xAB,0xFF,0x1F};
static const uint8_t sp2_SAFE[] = {0x08,0xF8,0x39,0x4C,0x02,0x1A,0xD0,0x80,0x05,0x3C,0x60,0x81,0x95,0x0F,0x15,0xE2,0x6A,0xAB,0x4F,0xD1,0x43,0x8A,0x8A,0xBF,0xB9,0xD5,0xAD,0x57,0x3F,0xAA,0x23,0xBB,0x3F,0x9E,0xCB,0xDC,0xF3,0x99,0x9E,0x5E,0x19,0xCD,0xEB,0x8E,0x79,0x7A,0x43,0x13,0xED,0x39,0x0C,0x18,0x7E,0x5C,0x02,0x12,0x90,0x00,0x07,0x28,0x40,0x81,0xFF,0x07};

class TalkiePCM {
public:
  TalkiePCM() = default;
  
  void begin() {
    // Initialize PWM for audio output on the speaker pin
    pinMode(SPEAKER_PIN, OUTPUT);
    
    // Set PWM frequency to a higher value for better audio quality
    analogWriteFreq(62500); // Set PWM frequency to 62.5kHz
    analogWriteRange(255);  // Set PWM range to 0-255
    
    // Initialize to 50% duty cycle (silence)
    analogWrite(SPEAKER_PIN, 128);
    
    // Initialize variables
    volume = 1.0f;
    synthRand = 1;
    
    // Reset synthesis state
    synthPeriod = 0;
    synthK1 = synthK2 = 0;
    synthK3 = synthK4 = synthK5 = synthK6 = synthK7 = synthK8 = synthK9 = synthK10 = 0;
    nextSample = 0;
    periodCounter = 0;
    
    for (int i = 0; i < 10; i++) {
      x[i] = 0;
    }
  }
  
  void say(const uint8_t* address) {
    setPtr(address);
    calculateSamples();
  }
  
  void silence(uint16_t ms) {
    int samples = FS * ms / 1000;
    for (int j = 0; j < samples; j++) {
      writeSample(0);
      delayMicroseconds(125); // 1/8000 second = 125 microseconds
    }
  }
  
  void setVolume(float vol) { 
    volume = vol; 
  }

private:
  float volume = 1.0f;
  const uint8_t* ptrAddr = nullptr;
  uint8_t ptrBit;
  uint8_t synthPeriod;
  int16_t synthK1, synthK2;
  int8_t synthK3, synthK4, synthK5, synthK6, synthK7, synthK8, synthK9, synthK10;
  uint16_t synthRand;
  
  // TMS5220 lookup tables
  const uint8_t tmsEnergy[0x10] = {0x00, 0x02, 0x03, 0x04, 0x05, 0x07, 0x0a, 0x0f,
                               0x14, 0x20, 0x29, 0x39, 0x51, 0x72, 0xa1, 0xff};
  const uint8_t tmsPeriod[0x40] = {
      0x00, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
      0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24,
      0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2D, 0x2F, 0x31, 0x33,
      0x35, 0x36, 0x39, 0x3B, 0x3D, 0x3F, 0x42, 0x45, 0x47, 0x49, 0x4D,
      0x4F, 0x51, 0x55, 0x57, 0x5C, 0x5F, 0x63, 0x66, 0x6A, 0x6E, 0x73,
      0x77, 0x7B, 0x80, 0x85, 0x8A, 0x8F, 0x95, 0x9A, 0xA0};
  const uint16_t tmsK1[0x20] = {
      0x82C0, 0x8380, 0x83C0, 0x8440, 0x84C0, 0x8540, 0x8600, 0x8780,
      0x8880, 0x8980, 0x8AC0, 0x8C00, 0x8D40, 0x8F00, 0x90C0, 0x92C0,
      0x9900, 0xA140, 0xAB80, 0xB840, 0xC740, 0xD8C0, 0xEBC0, 0x0000,
      0x1440, 0x2740, 0x38C0, 0x47C0, 0x5480, 0x5EC0, 0x6700, 0x6D40};
  const uint16_t tmsK2[0x20] = {
      0xAE00, 0xB480, 0xBB80, 0xC340, 0xCB80, 0xD440, 0xDDC0, 0xE780,
      0xF180, 0xFBC0, 0x0600, 0x1040, 0x1A40, 0x2400, 0x2D40, 0x3600,
      0x3E40, 0x45C0, 0x4CC0, 0x5300, 0x5880, 0x5DC0, 0x6240, 0x6640,
      0x69C0, 0x6CC0, 0x6F80, 0x71C0, 0x73C0, 0x7580, 0x7700, 0x7E80};
  const uint8_t tmsK3[0x10] = {0x92, 0x9F, 0xAD, 0xBA, 0xC8, 0xD5, 0xE3, 0xF0,
                           0xFE, 0x0B, 0x19, 0x26, 0x34, 0x41, 0x4F, 0x5C};
  const uint8_t tmsK4[0x10] = {0xAE, 0xBC, 0xCA, 0xD8, 0xE6, 0xF4, 0x01, 0x0F,
                           0x1D, 0x2B, 0x39, 0x47, 0x55, 0x63, 0x71, 0x7E};
  const uint8_t tmsK5[0x10] = {0xAE, 0xBA, 0xC5, 0xD1, 0xDD, 0xE8, 0xF4, 0xFF,
                           0x0B, 0x17, 0x22, 0x2E, 0x39, 0x45, 0x51, 0x5C};
  const uint8_t tmsK6[0x10] = {0xC0, 0xCB, 0xD6, 0xE1, 0xEC, 0xF7, 0x03, 0x0E,
                           0x19, 0x24, 0x2F, 0x3A, 0x45, 0x50, 0x5B, 0x66};
  const uint8_t tmsK7[0x10] = {0xB3, 0xBF, 0xCB, 0xD7, 0xE3, 0xEF, 0xFB, 0x07,
                           0x13, 0x1F, 0x2B, 0x37, 0x43, 0x4F, 0x5A, 0x66};
  const uint8_t tmsK8[0x08] = {0xC0, 0xD8, 0xF0, 0x07, 0x1F, 0x37, 0x4F, 0x66};
  const uint8_t tmsK9[0x08] = {0xC0, 0xD4, 0xE8, 0xFC, 0x10, 0x25, 0x39, 0x4D};
  const uint8_t tmsK10[0x08] = {0xCD, 0xDF, 0xF1, 0x04, 0x16, 0x20, 0x3B, 0x4D};
  const uint8_t chirp[CHIRP_SIZE] = {
      0x00, 0x2a, 0xd4, 0x32, 0xb2, 0x12, 0x25, 0x14, 0x02, 0xe1, 0xc5,
      0x02, 0x5f, 0x5a, 0x05, 0x0f, 0x26, 0xfc, 0xa5, 0xa5, 0xd6, 0xdd,
      0xdc, 0xfc, 0x25, 0x2b, 0x22, 0x21, 0x0f, 0xff, 0xf8, 0xee, 0xed,
      0xef, 0xf7, 0xf6, 0xfa, 0x00, 0x03, 0x02, 0x01};
  
  int16_t nextSample = 0;
  uint8_t periodCounter = 0;
  int16_t x[10] = {0};
  
  void setPtr(const uint8_t* addr) {
    ptrAddr = addr;
    ptrBit = 0;
  }
  
  uint8_t rev(uint8_t a) {
    a = (a >> 4) | (a << 4);
    a = ((a & 0xcc) >> 2) | ((a & 0x33) << 2);
    a = ((a & 0xaa) >> 1) | ((a & 0x55) << 1);
    return a;
  }
  
  uint8_t getBits(uint8_t bits) {
    if (ptrAddr == nullptr) return 0;
    uint8_t value;
    uint16_t data;
    data = rev(*(ptrAddr)) << 8;
    if (ptrBit + bits > 8) {
      data |= rev(*(ptrAddr + 1));
    }
    data <<= ptrBit;
    value = data >> (16 - bits);
    ptrBit += bits;
    if (ptrBit >= 8) {
      ptrBit -= 8;
      ptrAddr++;
    }
    return value;
  }
  
  int clip(int value, int min_val, int max_val) {
    if (value < min_val) return min_val;
    if (value > max_val) return max_val;
    return value;
  }
  
  void writeSample(int16_t sample) {
    int16_t outSample;
    if (volume == 1.0f)
      outSample = clip(static_cast<int>(sample) << 6, -32768, 32767);
    else
      outSample = clip(volume * (static_cast<int>(sample) << 6), -32768, 32767);
    
    int pwmValue = (outSample >> 8) + 128;
    pwmValue = clip(pwmValue, 0, 255);
    analogWrite(SPEAKER_PIN, pwmValue);
  }
  
  void processEnergy(uint16_t synthEnergy) {
    int16_t u[11] = {0};
    
    writeSample(nextSample);
    
    if (synthPeriod) {
      if (periodCounter < synthPeriod) {
        periodCounter++;
      } else {
        periodCounter = 0;
      }
      if (periodCounter < CHIRP_SIZE) {
        u[10] = ((chirp[periodCounter]) * (uint32_t)synthEnergy) >> 8;
      } else {
        u[10] = 0;
      }
    } else {
      synthRand = (synthRand >> 1) ^ ((synthRand & 1) ? 0xB800 : 0);
      u[10] = (synthRand & 1) ? synthEnergy : -synthEnergy;
    }
    
    u[9] = u[10] - (((int16_t)synthK10 * x[9]) >> 7);
    u[8] = u[9] - (((int16_t)synthK9 * x[8]) >> 7);
    u[7] = u[8] - (((int16_t)synthK8 * x[7]) >> 7);
    u[6] = u[7] - (((int16_t)synthK7 * x[6]) >> 7);
    u[5] = u[6] - (((int16_t)synthK6 * x[5]) >> 7);
    u[4] = u[5] - (((int16_t)synthK5 * x[4]) >> 7);
    u[3] = u[4] - (((int16_t)synthK4 * x[3]) >> 7);
    u[2] = u[3] - (((int16_t)synthK3 * x[2]) >> 7);
    u[1] = u[2] - (((int32_t)synthK2 * x[1]) >> 15);
    u[0] = u[1] - (((int32_t)synthK1 * x[0]) >> 15);
    
    u[0] = clip(u[0], -512, 511);
    
    x[9] = x[8] + (((int16_t)synthK9 * u[8]) >> 7);
    x[8] = x[7] + (((int16_t)synthK8 * u[7]) >> 7);
    x[7] = x[6] + (((int16_t)synthK7 * u[6]) >> 7);
    x[6] = x[5] + (((int16_t)synthK6 * u[5]) >> 7);
    x[5] = x[4] + (((int16_t)synthK5 * u[4]) >> 7);
    x[4] = x[3] + (((int16_t)synthK4 * u[3]) >> 7);
    x[3] = x[2] + (((int16_t)synthK3 * u[2]) >> 7);
    x[2] = x[1] + (((int32_t)synthK2 * u[1]) >> 15);
    x[1] = x[0] + (((int32_t)synthK1 * u[0]) >> 15);
    x[0] = u[0];
    
    nextSample = u[0];
  }
  
  void calculateSamples() {
    uint8_t energy = 0;
    uint16_t synthEnergy = 0;
    
    do {
      energy = getBits(4);
      if (energy == 0) {
        synthEnergy = 0;
      } else if (energy == 0xf) {
        synthEnergy = 0;
        synthK1 = 0;
        synthK2 = 0;
        synthK3 = 0;
        synthK4 = 0;
        synthK5 = 0;
        synthK6 = 0;
        synthK7 = 0;
        synthK8 = 0;
        synthK9 = 0;
        synthK10 = 0;
      } else {
        synthEnergy = tmsEnergy[energy];
        bool repeat = getBits(1);
        synthPeriod = tmsPeriod[getBits(6)];
        if (!repeat) {
          synthK1 = tmsK1[getBits(5)];
          synthK2 = tmsK2[getBits(5)];
          synthK3 = tmsK3[getBits(4)];
          synthK4 = tmsK4[getBits(4)];
          if (synthPeriod) {
            synthK5 = tmsK5[getBits(4)];
            synthK6 = tmsK6[getBits(4)];
            synthK7 = tmsK7[getBits(4)];
            synthK8 = tmsK8[getBits(3)];
            synthK9 = tmsK9[getBits(3)];
            synthK10 = tmsK10[getBits(3)];
          }
        }
      }
      
      // Generate 200 samples for this frame (25ms at 8kHz)
      for (int j = 0; j < 200; j++) {
        processEnergy(synthEnergy);
        delayMicroseconds(125);
      }
    } while (energy != 0xf);
    
    // Return to silence when done
    analogWrite(SPEAKER_PIN, 128);
  }
};

// Global Talkie instance
TalkiePCM voice;

// Demo control variables
DemoScenario currentScenario = DEMO_NORMAL;
unsigned long lastDemoChange = 0;
bool systemActive = false;
bool useFahrenheit = true; // Set to false for Celsius

// Demo temperature scenarios with realistic values
float demoTemperatures[DEMO_COUNT] = {
  36.8,  // DEMO_NORMAL (98.2°F)
  38.2,  // DEMO_SLIGHT_FEVER (100.8°F)
  39.5,  // DEMO_HIGH_FEVER (103.1°F)
  40.8,  // DEMO_CRITICAL (105.4°F)
  35.2   // DEMO_HYPOTHERMIA (95.4°F)
};

// Convert Celsius to Fahrenheit
float celsiusToFahrenheit(float celsius) {
  return (celsius * 9.0 / 5.0) + 32.0;
}

void setup() {
  Serial.begin(115200);
  Serial.println("=================================");
  Serial.println("ATLAS Thermal Imaging Module v2.0");
  Serial.println("Advanced Tactical Location Aware Sensor");
  Serial.println("Enhanced Demo with Fahrenheit Support");
  Serial.println("Speaker on pin 16");
  Serial.println("=================================");
  
  // Initialize the speech synthesizer
  voice.begin();
  voice.setVolume(1.0);
  
  // System ready announcement
  Serial.println("System initialization...");
  voice.say(sp2_READY);
  delay(300);
  
  Serial.println("Starting automatic demo sequence...");
  Serial.println("Demo will cycle through 5 scenarios every 15 seconds");
  Serial.println("Temperature unit: " + String(useFahrenheit ? "Fahrenheit" : "Celsius"));
  
  systemActive = true;
  lastDemoChange = millis();
}

void sayNumber(int number) {
  const uint8_t* digitWords[] = {sp2_ZERO, sp2_ONE, sp2_TWO, sp2_THREE, sp2_FOUR, 
                                sp2_FIVE, sp2_SIX, sp2_SEVEN, sp2_EIGHT, sp3_NINE};
  
  if (number >= 100) {
    int hundreds = number / 100;
    voice.say(digitWords[hundreds]);
    delay(200);
    voice.say(sp2_HUNDRED);
    delay(300);
    number %= 100;
  }
  
  if (number >= 20) {
    voice.say(sp2_TWENTY);
    delay(300);
    number -= 20;
  } else if (number >= 10) {
    voice.say(sp2_TEN);
    delay(300);
    number -= 10;
  }
  
  if (number > 0) {
    voice.say(digitWords[number]);
    delay(300);
  }
}

void announceTemperatureFahrenheit(float fahrenheit) {
  Serial.print("Announcing temperature: ");
  Serial.print(fahrenheit);
  Serial.println("°F");
  
  voice.say(sp2_TEMPERATURE);
  delay(400);
  
  // Convert to integer for easier speech
  int wholePart = (int)fahrenheit;
  int decimalPart = (int)((fahrenheit - wholePart) * 10);
  
  sayNumber(wholePart);
  
  if (decimalPart > 0) {
    voice.say(sp2_POINT);
    delay(300);
    const uint8_t* digitWords[] = {sp2_ZERO, sp2_ONE, sp2_TWO, sp2_THREE, sp2_FOUR, 
                                  sp2_FIVE, sp2_SIX, sp2_SEVEN, sp2_EIGHT, sp3_NINE};
    voice.say(digitWords[decimalPart]);
    delay(300);
  }
  
  voice.say(sp2_DEGREES);
  delay(300);
  voice.say(sp3_FARENHEIT);
  delay(500);
}

void announceTemperatureCelsius(float celsius) {
  Serial.print("Announcing temperature: ");
  Serial.print(celsius);
  Serial.println("°C");
  
  voice.say(sp2_TEMPERATURE);
  delay(400);
  
  // Announce whole number part
  int wholePart = (int)celsius;
  sayNumber(wholePart);
  
  voice.say(sp2_POINT);
  delay(300);
  
  // Announce decimal part
  int decimalPart = (int)((celsius - wholePart) * 10);
  const uint8_t* digitWords[] = {sp2_ZERO, sp2_ONE, sp2_TWO, sp2_THREE, sp2_FOUR, 
                                sp2_FIVE, sp2_SIX, sp2_SEVEN, sp2_EIGHT, sp3_NINE};
  voice.say(digitWords[decimalPart]);
  delay(300);
  
  voice.say(sp2_DEGREES);
  delay(500);
}

void checkTemperatureStatusCelsius(float tempC) {
  if (tempC >= TEMP_CRITICAL) {
    voice.say(sp2_DANGER);
    delay(300);
    voice.say(sp4_WARNING);
    delay(300);
    voice.say(sp4_EMERGENCY);
    delay(300);
    voice.say(sp4_PLEASE);
    delay(300);
    voice.say(sp3_ICE);
    Serial.println("CRITICAL: Emergency! Apply ice!");
  }
  else if (tempC >= TEMP_HIGH_FEVER) {
    voice.say(sp2_HIGH);
    delay(300);
    voice.say(sp4_WARNING);
    delay(300);
    Serial.println("HIGH FEVER: Warning!");
  }
  else if (tempC >= TEMP_FEVER_LOW) {
    voice.say(sp2_ALERT);
    delay(300);
    Serial.println("FEVER: Alert condition");
  }
  else if (tempC >= TEMP_NORMAL_LOW && tempC <= TEMP_NORMAL_HIGH) {
    voice.say(sp2_SAFE);
    delay(300);
    Serial.println("NORMAL: Temperature within safe range");
  }
  else if (tempC < TEMP_NORMAL_LOW) {
    voice.say(sp2_LOW);
    delay(300);
    voice.say(sp4_WARNING);
    delay(300);
    Serial.println("HYPOTHERMIA: Dangerously low temperature!");
  }
}

void performDemoScenario(DemoScenario scenario) {
  float tempC = demoTemperatures[scenario];
  float tempF = celsiusToFahrenheit(tempC);
  
  String scenarioNames[] = {"NORMAL", "SLIGHT FEVER", "HIGH FEVER", "CRITICAL", "HYPOTHERMIA"};
  
  Serial.println("\n=== ATLAS THERMAL SCAN ===");
  Serial.println("Scenario: " + scenarioNames[scenario]);
  Serial.print("Temperature: ");
  Serial.print(tempC);
  Serial.print("°C / ");
  Serial.print(tempF);
  Serial.println("°F");
  
  // Scanning simulation
  Serial.print("Scanning");
  for (int i = 0; i < 3; i++) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" Complete!");
  
  // Announce temperature in selected unit
  if (useFahrenheit) {
    announceTemperatureFahrenheit(tempF);
  } else {
    announceTemperatureCelsius(tempC);
  }
  
  // Medical assessment
  checkTemperatureStatusCelsius(tempC);
  
  Serial.println("===========================\n");
}

void loop() {
  if (!systemActive) return;
  
  unsigned long currentTime = millis();
  
  // Change demo scenario every 15 seconds
  if (currentTime - lastDemoChange > 15000) {
    currentScenario = (DemoScenario)((currentScenario + 1) % DEMO_COUNT);
    lastDemoChange = currentTime;
    
    // Perform the demo scenario
    performDemoScenario(currentScenario);
    
    // After completing all scenarios, announce completion
    if (currentScenario == DEMO_NORMAL) {
      delay(2000);
      Serial.println("Demo sequence complete. Restarting...");
      voice.say(sp2_READY);
      delay(1000);
    }
  }
  
  delay(100);
}

// Manual test functions for development
void testBasicNumbers() {
  Serial.println("Testing basic numbers...");
  
  voice.say(sp2_ONE);
  delay(800);
  voice.say(sp2_TWO);
  delay(800);
  voice.say(sp2_THREE);
  delay(800);
  voice.say(sp2_FOUR);
  delay(800);
  voice.say(sp2_FIVE);
  delay(800);
}

void testTemperatureAnnouncement() {
  Serial.println("Testing temperature announcements...");
  
  // Test normal temperature
  announceTemperatureFahrenheit(98.6);
  delay(2000);
  
  // Test high temperature
  announceTemperatureFahrenheit(103.2);
  delay(2000);
  
  // Test low temperature
  announceTemperatureFahrenheit(95.1);
  delay(2000);
}

// Call these functions from setup() for manual testing:
// testBasicNumbers();
// testTemperatureAnnouncement();
